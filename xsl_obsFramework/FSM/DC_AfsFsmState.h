  
//
// Copyright 2004 P&P Software GmbH - All Rights Reserved
//
// DC_AfsFsmState.h
//
// This file was automatically generated by an XSL program

#ifndef DC_AfsFsmState_H
#define DC_AfsFsmState_H

#include "../GeneralInclude/ForwardDeclarations.h"
#include "../GeneralInclude/BasicTypes.h"
#include "../FSM/FsmState.h"
#include "../Qom/object.h"

/**
 * Sample application class. FsmState component representing the AFS state of the 
 * FDIR FSM.
 * <p>
 * This is a stub class. It provides dummy implementations for some of the virtual
 * methods of its superclass. 
 * This class was automatically generated by an XSL program that processes the
 * XML-based <i>target application model</i>. The XSL program  
 * searches the application model for all "FsmState" elements
 * which have a "Custom" subelement that indicates that a custom FsmState
 * class must be created. For each such element a class header file is created.
 * The base class of the generated class is assumed to be the class in the
 * "type" attribute of the FsmState element. 
 * The information in the application model is used to decide which virtual methods
 * should be overridden.
 * @todo Modify the generator meta-component generateRecoveryAction to generate the code
 * that sets the class identifier and to treat the default attributes in the custom recovery action description.
 * @author Automatically Generated Class
 * @version 1.0
 */

void DC_AfsFsmState_register(void);


/////////////////////////////////////////////////////////////////////////////////
//
//                              class and struct
//
/////////////////////////////////////////////////////////////////////////////////

struct DC_AfsFsmState {
    FsmState parent;
};


struct DC_AfsFsmStateClass {
    FsmStateClass parent_class;
    
    /**
     * Disable all reconfigurations; disable all telecommands to change the enable/disable status 
     * of the reconfiguration managers.
     * <p>
     * This is a stub method that must be completed by the application developer.
     * This stub provides a default implementation that calls the <code>doInit</code> 
     * method of the superclass.
     */
    void (*doInit)(void *obj);
    
    /**
     * Dummy implementation that returns without taking any action. There is no continuation
     * action associated to this class.
     */
    void (*doContinue)(void *obj);
          
    /**
     * Enable all reconfigurations; enable all telecommands to change the enable/disable status 
     * of the reconfiguration managers.
     * <p>
     * This is a stub method that must be completed by the application developer.
     * This stub provides a default implementation that calls the <code>doExit</code> 
     * method of the superclass.
     */
    void (*doExit)(void *obj);
    
};


#define DC_AFSFSMSTATE_GET_CLASS(obj) \
             OBJECT_GET_CLASS(DC_AfsFsmStateClass, obj, TYPE_DC_AFSFSMSTATE)


#define DC_AFSFSMSTATE_CLASS(klass) \
             OBJECT_CLASS_CHECK(DC_AfsFsmStateClass, klass, TYPE_DC_AFSFSMSTATE)


#define DC_AFSFSMSTATE(obj) \
             OBJECT_CHECK(DC_AfsFsmState, obj, TYPE_DC_AFSFSMSTATE)


DC_AfsFsmState* DC_AfsFsmState_new(void);



#endif
             