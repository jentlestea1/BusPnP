  
//
// Copyright 2003 P&P Software GmbH - All Rights Reserved
//
// TestCaseSampleR2Database_1.h
//
// This file was automatically generated by an XSL program
//

#ifndef TestCaseSampleR2Database_1_H
#define TestCaseSampleR2Database_1_H

#include "../Utilities/TestCaseWithEvtCheck.h"
#include "../Qom/object.h"

/**
 * Verify the functionalities implemented by the
 * <code>DC_SampleR2Database</code> component.
 * An instance of the component is created and the following
 * specific tests are performed upon it: <ol>
 * <li>It is verified that the class ID of the component has the correct 
 * value.</li>
 * <li>It is verified that, after instantiation, the configuration service
 * of the component reports "not configured".</li>
 * <li>The component is configured and it is verified that the configuration service
 * of the component reports "configured".</li>
 * <li>It is verified that the operational table is initialized to hold a copy
 * of the default table.</li>
 * <li>The setter and getter methods for all parameter types are verified.</li>
 * <li>The pointer getter methods for all parameter types are verified.</li>  
 * <li>Non-nominal behaviour check: it is verified that a call to a setter method with an illegal
 * parameter identifier results in the generation of an "illegal database access" event 
 * report.  </li>
 * <li>Non-nominal behaviour check: it is verified that a call to a pointer getter method with an illegal
 * parameter identifier results in the generation of an "illegal database access" event 
 * report.  </li>
   
 * </ol>
 * Note that the code for this test class - like the code for the component it tests -
 * is automatically generated by an XSLT program. The XSLT program takes as an input an
 * XML file (the 'Parameter Database Descriptor File') that describes the structure
 * of the database encapsulated in the component being tested.
 * @see DC_SampleR2Database
 * @author Alessandro Pasetti (P&P Software GmbH)
 * @version 1.0
 */


void TestCaseSampleR2Database_1_register(void);


/////////////////////////////////////////////////////////////////////////////////
//
//                              class and struct
//
/////////////////////////////////////////////////////////////////////////////////

struct TestCaseSampleR2Database_1 {
    TestCaseWithEvtCheck parent;
};


struct TestCaseSampleR2Database_1Class {
    TestCaseWithEvtCheckClass parent_class;
    /**
     * Execute the test case. See class comment for details.
     */
    void (*runTestCase)(void* obj);
};


#define TESTCASESAMPLER2DATABASE_1_GET_CLASS(obj) \
         OBJECT_GET_CLASS(DC_SampleR2DatabaseClass, obj, TYPE_DC_SAMPLER2DATABASE)


#define TESTCASESAMPLER2DATABASE_1_CLASS(klass) \
         OBJECT_CLASS_CHECK(TestCaseSampleR2Database_1Class, klass, TYPE_DC_SAMPLER2DATABASE)


#define TESTCASESAMPLER2DATABASE_1(obj) \
         OBJECT_CHECK(TestCaseSampleR2Database_1, obj, TYPE_TESTCASESAMPLER2DATABASE_1)


         TestCaseSampleR2Database_1* TestCaseSampleR2Database_1_new(void);
#endif
